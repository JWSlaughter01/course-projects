#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>

using namespace std;

const int MAXPRODUCTS = 100;
string names[MAXPRODUCTS];
double prices[MAXPRODUCTS];
string codes[MAXPRODUCTS];
int numProducts = 0;

int findItem(string inputCode);
void readConfiguration();
void display();
void process();

int main() {
   readConfiguration();
   display();
   process();
}

void readConfiguration() {
   // Code here to Read the values into arrays
   ifstream file("menu.txt");
   while (file >> codes[numProducts] >> ws && getline(file, names[numProducts], ' ') && file >> prices[numProducts]) {
      numProducts++;
   }
   file.close();
    cout << numProducts << " items loaded.\n";
}

void display()
{
    cout << endl;
    cout << left << setw(8)   <<  "Codes"
                            << setw(25) << "Item Name"
                             << setw(4)  <<  "Prices" << endl;
    cout << "--------------------------------------------------------------------------"  << endl;
    //code here
    //Print the values from their respective arrays
    for (int i = 0; i < numProducts; i++) {
       cout << left << setw(8) << codes[i] << setw(25) << names[i] << "$" << fixed << setprecision(2) << prices[i] << endl;
    }
}
//return valid index if the item is found, return -1 otherwise.
int findItem(string inputCode) {
    //code here!
    for (int i = 0; i < numProducts; i++) {
       if (codes[i] == inputCode) {
          return i;
       }
    }

    return -1;
}

// read order string like "A1 A2 E1 E2 S1" and generate the restaurant bill.
// Output the item name and price in each line, total in the final line.
void process() {
    //code here
    double total = 0;
    int index;
    string line, code;
    cout << "\nEnter your order string: ";
    getline(cin, line);
    istringstream my_stream(line);
    cout << endl;
    while (my_stream >> code) {
       index = findItem(code);
       if (index < 0) {
          cout << code << " is invalid. Skipping it." << endl;
       } else {
          cout << names[index] << ": $" << prices[index] << endl;
          total += prices[index];
    }
    
}
   cout << "Total: $" << total << endl;
}

